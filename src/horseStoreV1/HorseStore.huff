// 60008060093d393df3 -> Contract Creation Bytecode
// 60008060093d393df3 5f -> 5f is the opcode for PUSH0
// You can check opcodes in evm.codes

// 0xcdfead2e00000000000000000000000000000000000000000000000000000001
// 0xe026c01700000000000000000000000000000000000000000000000000000001

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() // A counter, essentially, that says "hey here's a slot that's currently open to store"

#define macro MAIN() = takes(0) returns(0) {
    // 0x00          // [0]
    // // Huff is smart enough to know that I mean PUSH0 0x00 by this
    // // If I wrote 0x01, it would know I mean PUSH1 0x01, and so on
    // calldataload  // [calldata]
    // // adds the first 32 bytes of calldata to the stack
    // // Pops off the 0x00 value from the stack so that it doesn't skip the first byte of calldata
    // /** To get the function selector, we need to get the first 4 bytes of calldata, 
    //  * which means we need to shift the calldata by 28 bytes to the right, or 224 bits
    //  */
    // 0xe0          // TOP [0xe0, calldata] BOTTOM
    // shr           // [functionSelector]
    0x00 calldataload 0xe0 shr

    // 0xcdfead2e == updateHorseNumber(uint256)
    // 0xe026c017 == readNumberOfHorses()
    dup1             // [functionSelector, functionSelector]
    0xcdfead2e       // [0xcdfead2e, functionSelector, functionSelector]
    eq               // [true_if_matches, functionSelector]
    // jump to updateHorseNumber code if true
    updateJump       // [updateHorseNumberProgramCounter, true/false, functionSelector]
    jumpi            // [functionSelector]
    // now even if it doesn't jump, it will still have the functionSelector on the stack

    /** readNumberOfHorses, if the function selector doesn't match updateHorseNumber, then we'd have to get the function selector
     * again and then compare it to readNumberOfHorses. Instead, use DUP1 to duplicate the function selector and then compare it to
     * readNumberOfHorses. Saves gas and is more efficient, whereas solidity might not be as efficient.
     */
    0xe026c017       // [0xe026c017, functionSelector]
    eq               // [true_if_matches]
    readJump         // [readJump, true/false]
    jumpi            // []

    0x00 0x00 revert // [0,0] then revert -> []

    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. get the value from calldata
    0x04                                // [4]
    calldataload                        // [calldata - functionSelector = inputValue]
    // 2. get the storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]     // [storageSlot, inputValue]
    // 3. sstore opcode
    sstore // top -> storageSlot = key, bottom -> inputValue = value
    stop // if not stopped, it would go on to execute the next function too
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {}